"use strict";var nyplViewer=angular.module("nyplViewer",["ngMaterial","base64","CanvasViewer","ui.router","ui.layout","angularGrid","ui.tinymce"]).config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise(""),e.state("main",{url:"",templateUrl:"src/grid-list/main.html",controller:"GridListCtrl",controllerAs:"gridList"}).state("image",{url:"/image/:id",templateUrl:"src/image-viewer/viewer.html",controller:"ImageViewerCtrl",controllerAs:"imageViewer",params:{myParam:null}})}]).config(["$mdIconProvider","$mdThemingProvider",function(e,t){e.defaultIconSet("./assets/svg/avatars.svg",128).icon("menu","./assets/svg/menu.svg",24).icon("share","./assets/svg/share.svg",24).icon("google_plus","./assets/svg/google_plus.svg",24).icon("hangouts","./assets/svg/hangouts.svg",24).icon("twitter","./assets/svg/twitter.svg",24).icon("pen","./assets/svg/fountain-pen.svg",24).icon("open-book","./assets/svg/open-book.svg",24).icon("phone","./assets/svg/phone.svg",24),t.theme("default").primaryPalette("brown").accentPalette("red")}]);nyplViewer.controller("GridListCtrl",["$http","NyplApiCalls","$location","$state","$scope","angularGridInstance",function(e,t,r,i,a,n){ctrl=this,ctrl.searchText="new york city 1776",ctrl.search=function(){t.nyplSearch(ctrl.searchText).then(function(e){ctrl.pics=ctrl.getItemThumbnails(e)})},ctrl.getItemThumbnails=function(e){var r=[];return angular.forEach(e,function(e,i){t.getImage(e).then(function(e){var t={};t.data=e.item,t.image=e.thumbnailUrl,t.title=e.title,t.fullImageUrl=e.fullImageUrl;var i=new Image;i.src=t.fullImageUrl,t.actualHeight=i.height,t.actualWidth=i.width,t.showImageDetail=ctrl.showImageDetail,r.push(t)}).catch(function(e){console.log(e)}).finally(function(){})}),r},ctrl.showImageDetail=function(e){console.log(e),i.go("image",{myParam:e});var t="/image/999";r.path(t)},ctrl.refresh=function(){n.gallery.refresh()},ctrl.search()}]),nyplViewer.controller("ImageDialogCtrl",["$mdDialog","event","tile",function(e,t,r){var i=this;i.overlays=[{x:0,y:0,w:0,h:0,color:"#00FF00"}],i.options={zoom:{value:1,step:.1},rotate:{value:90},controls:{fit:"height"}},i.imageUrl=r.fullImageUrl,i.hide=function(){e.hide()},i.cancel=function(){e.hide()}}]),nyplViewer.controller("ImageViewerCtrl",["$scope","$timeout","$stateParams",function(e,t,r){ctrl=this,console.log(r.myParam),ctrl.fullImageUrl=r.myParam.fullImageUrl,ctrl.thumbNail=r.myParam.image,ctrl.title=r.myParam.title,ctrl.tinymceModel="";var i={inline:!0,build:function(e){ctrl.isViewerBuilt=!1},built:function(t){ctrl.isViewerBuilt=!0,e.$apply()}};$(".image").viewer(i),ctrl.isTranscribe=!1,ctrl.transcription="empty",ctrl.transcribe=function(){ctrl.isTranscribe=!0}}]),nyplViewer.factory("NyplApiCalls",["$http","$q","$base64",function(e,t,r){function i(e){return{method:"GET",url:e,headers:{Authorization:"Basic "+n}}}function a(e){return void 0===e.data?[]:e.data.nyplAPI.response.result}var n=r.encode("NomanTrips:water1bury"),l={Authorization:'Token token="'+n+'"'};return{nyplSearch:function(r){var n="http://api.repo.nypl.org/api/v1/items/search?q="+r+"&publicDomainOnly=true",s=t.defer();return e(i(n),{headers:l}).then(function(e){s.resolve(a(e))},function(e){s.reject(e)}),s.promise},getImage:function(r){var a=t.defer();return e(i(r.apiItemDetailURL),{headers:l}).then(function(e){var t=e.data;if(void 0!=t.nyplAPI.response.sibling_captures.capture.imageLinks)var i=t.nyplAPI.response.sibling_captures.capture.imageLinks.imageLink[4].$,n=t.nyplAPI.response.sibling_captures.capture.imageLinks.imageLink[0].$;else var i=t.nyplAPI.response.sibling_captures.capture[0].imageLinks.imageLink[4].$,n=t.nyplAPI.response.sibling_captures.capture[0].imageLinks.imageLink[0].$;r.fullImageUrl=n,r.thumbnailUrl=i,a.resolve(r)},function(e){a.reject(e)}),a.promise}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImdyaWQtbGlzdC9ncmlkLWxpc3QtY29udHJvbGxlci5qcyIsImdyaWQtbGlzdC9pbWFnZS1kaWFsb2ctY29udHJvbGxlci5qcyIsImltYWdlLXZpZXdlci9pbWFnZS12aWV3ZXItY29udHJvbGxlci5qcyIsInNlcnZpY2VzL255cGwtYXBpLWNhbGxzLXNlcnZpY2UuanMiXSwibmFtZXMiOlsibnlwbFZpZXdlciIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwicGFyYW1zIiwibXlQYXJhbSIsIiRtZEljb25Qcm92aWRlciIsIiRtZFRoZW1pbmdQcm92aWRlciIsImRlZmF1bHRJY29uU2V0IiwiaWNvbiIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwiJGh0dHAiLCJOeXBsQXBpQ2FsbHMiLCIkbG9jYXRpb24iLCIkc3RhdGUiLCIkc2NvcGUiLCJhbmd1bGFyR3JpZEluc3RhbmNlIiwiY3RybCIsInRoaXMiLCJzZWFyY2hUZXh0Iiwic2VhcmNoIiwibnlwbFNlYXJjaCIsInRoZW4iLCJyZXNwb25zZSIsInBpY3MiLCJnZXRJdGVtVGh1bWJuYWlscyIsInJlc3VsdHMiLCJmb3JFYWNoIiwidmFsdWUiLCJrZXkiLCJnZXRJbWFnZSIsIml0ZW1XaXRoSW1hZ2VVcmwiLCJ0aHVtYm5haWwiLCJkYXRhIiwiaXRlbSIsImltYWdlIiwidGh1bWJuYWlsVXJsIiwidGl0bGUiLCJmdWxsSW1hZ2VVcmwiLCJpbWciLCJJbWFnZSIsInNyYyIsImFjdHVhbEhlaWdodCIsImhlaWdodCIsImFjdHVhbFdpZHRoIiwid2lkdGgiLCJzaG93SW1hZ2VEZXRhaWwiLCJwdXNoIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJmaW5hbGx5IiwicGljIiwiZ28iLCJwYXRoIiwicmVmcmVzaCIsImdhbGxlcnkiLCIkbWREaWFsb2ciLCJldmVudCIsInRpbGUiLCJvdmVybGF5cyIsIngiLCJ5IiwidyIsImgiLCJjb2xvciIsIm9wdGlvbnMiLCJ6b29tIiwic3RlcCIsInJvdGF0ZSIsImNvbnRyb2xzIiwiZml0IiwiaW1hZ2VVcmwiLCJoaWRlIiwiY2FuY2VsIiwiJHRpbWVvdXQiLCIkc3RhdGVQYXJhbXMiLCJ0aHVtYk5haWwiLCJ0aW55bWNlTW9kZWwiLCJpbmxpbmUiLCJidWlsZCIsImUiLCJpc1ZpZXdlckJ1aWx0IiwiYnVpbHQiLCIkYXBwbHkiLCIkIiwidmlld2VyIiwiaXNUcmFuc2NyaWJlIiwidHJhbnNjcmlwdGlvbiIsInRyYW5zY3JpYmUiLCJmYWN0b3J5IiwiJHEiLCIkYmFzZTY0IiwiYnVpbGRIdHRwUmVxdWVzdCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiYXV0aCIsImV4dHJhY3QiLCJyZXN1bHQiLCJ1bmRlZmluZWQiLCJueXBsQVBJIiwiZW5jb2RlIiwibnlwbFVybCIsImRlZmVycmVkIiwiZGVmZXIiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsImFwaUl0ZW1EZXRhaWxVUkwiLCJzaWJsaW5nX2NhcHR1cmVzIiwiY2FwdHVyZSIsImltYWdlTGlua3MiLCJpbWFnZUxpbmsiXSwibWFwcGluZ3MiOiJBQUFBLFlBRUEsSUFBQUEsWUFBQUMsUUFBQUMsT0FBQSxjQUFBLGFBQUEsU0FBQSxlQUFBLFlBQUEsWUFBQSxjQUFBLGVBQUFDLFFBQUEsaUJBQUEscUJBQUEsU0FBQUMsRUFBQUMsR0FDQUEsRUFBQUMsVUFBQSxJQUVBRixFQUFBRyxNQUFBLFFBQ0FDLElBQUEsR0FDQUMsWUFBQSwwQkFDQUMsV0FBQSxlQUNBQyxhQUFBLGFBQ0FKLE1BQUEsU0FDQUMsSUFBQSxhQUNBQyxZQUFBLCtCQUNBQyxXQUFBLGtCQUNBQyxhQUFBLGNBQ0FDLFFBQUFDLFFBQUEsV0FFQVYsUUFBQSxrQkFBQSxx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UUFBQSxHQUFBQyxXQUFBQyxVQUFBLEdBQUE1QixDQUVBcEQsR0FBQUksYUFBQUEsRUFDQUosRUFBQUUsYUFBQUEsRUFVQXFFLEVBQUFFLFFBQUF6RSxJQUNBLFNBQUFYLEdBQ0FrRixFQUFBRyxPQUFBckYsS0FFQWtGLEVBQUFJIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIG55cGxWaWV3ZXIgPSBhbmd1bGFyLm1vZHVsZSgnbnlwbFZpZXdlcicsIFsnbmdNYXRlcmlhbCcsICdiYXNlNjQnLCAnQ2FudmFzVmlld2VyJywgJ3VpLnJvdXRlcicsICd1aS5sYXlvdXQnLCAnYW5ndWxhckdyaWQnLCAndWkudGlueW1jZSddKS5jb25maWcoW1wiJHN0YXRlUHJvdmlkZXJcIiwgXCIkdXJsUm91dGVyUHJvdmlkZXJcIiwgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnJyk7XG5cbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ21haW4nLCB7XG4gICAgdXJsOiAnJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3NyYy9ncmlkLWxpc3QvbWFpbi5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnR3JpZExpc3RDdHJsJyxcbiAgICBjb250cm9sbGVyQXM6ICdncmlkTGlzdCdcbiAgfSkuc3RhdGUoJ2ltYWdlJywge1xuICAgIHVybDogXCIvaW1hZ2UvOmlkXCIsXG4gICAgdGVtcGxhdGVVcmw6ICdzcmMvaW1hZ2Utdmlld2VyL3ZpZXdlci5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnSW1hZ2VWaWV3ZXJDdHJsJyxcbiAgICBjb250cm9sbGVyQXM6ICdpbWFnZVZpZXdlcicsXG4gICAgcGFyYW1zOiB7IG15UGFyYW06IG51bGwgfVxuICB9KTtcbn1dKS5jb25maWcoWyckbWRJY29uUHJvdmlkZXInLCAnJG1kVGhlbWluZ1Byb3ZpZGVyJywgZnVuY3Rpb24gKCRtZEljb25Qcm92aWRlciwgJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XG4gIC8vIFJlZ2lzdGVyIHRoZSB1c2VyIGBhdmF0YXJgIGljb25zXG4gICRtZEljb25Qcm92aWRlci5kZWZhdWx0SWNvblNldChcIi4vYXNzZXRzL3N2Zy9hdmF0YXJzLnN2Z1wiLCAxMjgpLmljb24oXCJtZW51XCIsIFwiLi9hc3NldHMvc3ZnL21lbnUuc3ZnXCIsIDI0KS5pY29uKFwic2hhcmVcIiwgXCIuL2Fzc2V0cy9zdmcvc2hhcmUuc3ZnXCIsIDI0KS5pY29uKFwiZ29vZ2xlX3BsdXNcIiwgXCIuL2Fzc2V0cy9zdmcvZ29vZ2xlX3BsdXMuc3ZnXCIsIDI0KS5pY29uKFwiaGFuZ291dHNcIiwgXCIuL2Fzc2V0cy9zdmcvaGFuZ291dHMuc3ZnXCIsIDI0KS5pY29uKFwidHdpdHRlclwiLCBcIi4vYXNzZXRzL3N2Zy90d2l0dGVyLnN2Z1wiLCAyNCkuaWNvbihcInBlblwiLCBcIi4vYXNzZXRzL3N2Zy9mb3VudGFpbi1wZW4uc3ZnXCIsIDI0KS5pY29uKFwib3Blbi1ib29rXCIsIFwiLi9hc3NldHMvc3ZnL29wZW4tYm9vay5zdmdcIiwgMjQpLmljb24oXCJwaG9uZVwiLCBcIi4vYXNzZXRzL3N2Zy9waG9uZS5zdmdcIiwgMjQpO1xuXG4gICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpLnByaW1hcnlQYWxldHRlKCdicm93bicpLmFjY2VudFBhbGV0dGUoJ3JlZCcpO1xufV0pOyIsIid1c2Ugc3RyaWN0JztcblxubnlwbFZpZXdlci5jb250cm9sbGVyKCdHcmlkTGlzdEN0cmwnLCBbXCIkaHR0cFwiLCBcIk55cGxBcGlDYWxsc1wiLCBcIiRsb2NhdGlvblwiLCBcIiRzdGF0ZVwiLCBcIiRzY29wZVwiLCBcImFuZ3VsYXJHcmlkSW5zdGFuY2VcIiwgZnVuY3Rpb24gKCRodHRwLCBOeXBsQXBpQ2FsbHMsICRsb2NhdGlvbiwgJHN0YXRlLCAkc2NvcGUsIGFuZ3VsYXJHcmlkSW5zdGFuY2UpIHtcblxuICAgIGN0cmwgPSB0aGlzO1xuICAgIGN0cmwuc2VhcmNoVGV4dCA9ICduZXcgeW9yayBjaXR5IDE3NzYnO1xuXG4gICAgY3RybC5zZWFyY2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE55cGxBcGlDYWxscy5ueXBsU2VhcmNoKGN0cmwuc2VhcmNoVGV4dCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGN0cmwucGljcyA9IGN0cmwuZ2V0SXRlbVRodW1ibmFpbHMocmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY3RybC5nZXRJdGVtVGh1bWJuYWlscyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzcG9uc2UsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG5cbiAgICAgICAgICAgIE55cGxBcGlDYWxscy5nZXRJbWFnZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAoaXRlbVdpdGhJbWFnZVVybCkge1xuICAgICAgICAgICAgICAgIHZhciB0aHVtYm5haWwgPSB7fTtcbiAgICAgICAgICAgICAgICB0aHVtYm5haWwuZGF0YSA9IGl0ZW1XaXRoSW1hZ2VVcmwuaXRlbTtcbiAgICAgICAgICAgICAgICB0aHVtYm5haWwuaW1hZ2UgPSBpdGVtV2l0aEltYWdlVXJsLnRodW1ibmFpbFVybDtcbiAgICAgICAgICAgICAgICB0aHVtYm5haWwudGl0bGUgPSBpdGVtV2l0aEltYWdlVXJsLnRpdGxlO1xuICAgICAgICAgICAgICAgIHRodW1ibmFpbC5mdWxsSW1hZ2VVcmwgPSBpdGVtV2l0aEltYWdlVXJsLmZ1bGxJbWFnZVVybDtcbiAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IHRodW1ibmFpbC5mdWxsSW1hZ2VVcmw7XG4gICAgICAgICAgICAgICAgLy92YXIgZGVzYyA9IHRodW1ibmFpbC50aXRsZSxcbiAgICAgICAgICAgICAgICAvLyAgd2lkdGggPSAzNDMsLy9kZXNjLm1hdGNoKC93aWR0aD1cIiguKj8pXCIvKVsxXSxcbiAgICAgICAgICAgICAgICAvL2hlaWdodCA9IDUxMzsvL2Rlc2MubWF0Y2goL2hlaWdodD1cIiguKj8pXCIvKVsxXTtcbiAgICAgICAgICAgICAgICB0aHVtYm5haWwuYWN0dWFsSGVpZ2h0ID0gaW1nLmhlaWdodDsgLy8xMDMyOy8vNTEzO1xuICAgICAgICAgICAgICAgIHRodW1ibmFpbC5hY3R1YWxXaWR0aCA9IGltZy53aWR0aDsgLy8zNDM7XG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsLnNob3dJbWFnZURldGFpbCA9IGN0cmwuc2hvd0ltYWdlRGV0YWlsO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0aHVtYm5haWwpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBjdHJsLnNob3dJbWFnZURldGFpbCA9IGZ1bmN0aW9uIChwaWMpIHtcbiAgICAgICAgY29uc29sZS5sb2cocGljKTtcbiAgICAgICAgJHN0YXRlLmdvKCdpbWFnZScsIHsgbXlQYXJhbTogcGljIH0pO1xuICAgICAgICB2YXIgdXJsID0gJy9pbWFnZS8nICsgOTk5O1xuICAgICAgICAkbG9jYXRpb24ucGF0aCh1cmwpO1xuICAgIH07XG5cbiAgICBjdHJsLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFuZ3VsYXJHcmlkSW5zdGFuY2UuZ2FsbGVyeS5yZWZyZXNoKCk7XG4gICAgfTtcblxuICAgIGN0cmwuc2VhcmNoKCk7XG59XSk7XG4vKiogXHJcbm55cGxWaWV3ZXIuY29udHJvbGxlcignR3JpZExpc3RDdHJsJywgZnVuY3Rpb24gKCRodHRwLCBOeXBsQXBpQ2FsbHMsICRtZE1lZGlhLCAkbWREaWFsb2csICRsb2NhdGlvbiwgJHN0YXRlKSB7XHJcbiAgICBjdHJsID0gdGhpcztcclxuICAgIGN0cmwueWVhciA9IDE3NzY7XHJcblxyXG4gICAgY3RybC5zaG93SW1hZ2VEaWFsb2cgPSBmdW5jdGlvbiAoZXYsIHRpbGUpIHtcclxuICAgICAgICAkc3RhdGUuZ28oJ2ltYWdlJywge215UGFyYW06IHRpbGV9KVxyXG4gICAgICAgIC8vdmFyIHVybCA9ICcvaW1hZ2UvJyArIDk5OTtcclxuICAgICAgICAvLyRsb2NhdGlvbi5wYXRoKHVybCk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyh1cmwpO1xyXG4gICAgICAgIC8qKiBcclxuICAgICAgICBjb25zb2xlLmxvZygncnVubmluZyBzaG93IGRpYWxvZycpO1xyXG4gICAgICAgIHZhciB1c2VGdWxsU2NyZWVuID0gKCRtZE1lZGlhKCdzbScpIHx8ICRtZE1lZGlhKCd4cycpKTtcclxuICAgICAgICAkbWREaWFsb2cuc2hvdyh7XHJcbiAgICAgICAgICAgIGxvY2Fsczp7ZXZlbnQ6IGV2LCB0aWxlOiB0aWxlfSxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0ltYWdlRGlhbG9nQ3RybCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2RpYWxvZ0N0cmwnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NyYy9ncmlkLWxpc3QvaW1hZ2UtZGlhbG9nLmh0bWwnLFxyXG4gICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcclxuICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxyXG4gICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxyXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiB1c2VGdWxsU2NyZWVuXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGFuc3dlcikge1xyXG4gICAgICAgICAgICAgICAgY3RybC5zdGF0dXMgPSAnWW91IHNhaWQgdGhlIGluZm9ybWF0aW9uIHdhcyBcIicgKyBhbnN3ZXIgKyAnXCIuJztcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY3RybC5zdGF0dXMgPSAnWW91IGNhbmNlbGxlZCB0aGUgZGlhbG9nLic7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgfTtcclxuXHJcbiAgICBjdHJsLm55cGxJdGVtcyA9IE55cGxBcGlDYWxscy5ueXBsU2VhcmNoKGN0cmwueWVhcilcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXNwb25zZS5sZW5ndGgpO1xyXG4gICAgICAgICAgICBjdHJsLnRpbGVzID0gYnVpbGRHcmlkTW9kZWwoe1xyXG4gICAgICAgICAgICAgICAgaWNvbjogXCJhdmF0YXI6c3ZnLVwiLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiU3ZnLVwiLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogXCJcIixcclxuICAgICAgICAgICAgICAgIGltYWdlOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgc2hvd0ltYWdlRGlhbG9nOiBjdHJsLnNob3dJbWFnZURpYWxvZ1xyXG4gICAgICAgICAgICB9LCByZXNwb25zZSk7XHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgY3RybC5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGN0cmwubnlwbEl0ZW1zID0gTnlwbEFwaUNhbGxzLm55cGxTZWFyY2goY3RybC55ZWFyKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocmVzcG9uc2UubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIGN0cmwudGlsZXMgPSBidWlsZEdyaWRNb2RlbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJhdmF0YXI6c3ZnLVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlN2Zy1cIixcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiBcIlwiXHJcbiAgICAgICAgICAgICAgICB9LCByZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJ1aWxkR3JpZE1vZGVsKHRpbGVUbXBsLCByZXNwb25zZSkge1xyXG4gICAgICAgIHZhciBpdCwgcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXNwb25zZSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuXHJcbiAgICAgICAgICAgIE55cGxBcGlDYWxscy5nZXRJbWFnZSh2YWx1ZSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChpdGVtV2l0aEltYWdlVXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtV2l0aEltYWdlVXJsLml0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgaXQgPSBhbmd1bGFyLmV4dGVuZCh7fSwgdGlsZVRtcGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0LmltYWdlID0gaXRlbVdpdGhJbWFnZVVybC50aHVtYm5haWxVcmw7XHJcbiAgICAgICAgICAgICAgICAgICAgaXQudGl0bGUgPSBpdGVtV2l0aEltYWdlVXJsLnRpdGxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0LmZ1bGxJbWFnZVVybCA9IGl0ZW1XaXRoSW1hZ2VVcmwuZnVsbEltYWdlVXJsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2l0Lmljb24gPSBpdC5pY29uICsgKGogKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goaXQpO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH1cclxuXHJcbn0pXHJcbiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5ueXBsVmlld2VyLmNvbnRyb2xsZXIoJ0ltYWdlRGlhbG9nQ3RybCcsIFtcIiRtZERpYWxvZ1wiLCBcImV2ZW50XCIsIFwidGlsZVwiLCBmdW5jdGlvbiAoJG1kRGlhbG9nLCBldmVudCwgdGlsZSkge1xuICB2YXIgY3RybCA9IHRoaXM7XG4gIGN0cmwub3ZlcmxheXMgPSBbeyB4OiAwLCB5OiAwLCB3OiAwLCBoOiAwLCBjb2xvcjogJyMwMEZGMDAnIH1dO1xuICBjdHJsLm9wdGlvbnMgPSB7XG4gICAgem9vbToge1xuICAgICAgdmFsdWU6IDEsXG4gICAgICBzdGVwOiAwLjFcbiAgICB9LFxuICAgIHJvdGF0ZToge1xuICAgICAgdmFsdWU6IDkwXG4gICAgfSxcbiAgICBjb250cm9sczoge1xuICAgICAgZml0OiAnaGVpZ2h0J1xuICAgIH1cbiAgfTtcbiAgY3RybC5pbWFnZVVybCA9IHRpbGUuZnVsbEltYWdlVXJsO1xuICBjdHJsLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgfTtcblxuICBjdHJsLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkbWREaWFsb2cuaGlkZSgpO1xuICB9O1xufV0pOyIsIid1c2Ugc3RyaWN0JztcblxubnlwbFZpZXdlci5jb250cm9sbGVyKCdJbWFnZVZpZXdlckN0cmwnLCBbXCIkc2NvcGVcIiwgXCIkdGltZW91dFwiLCBcIiRzdGF0ZVBhcmFtc1wiLCBmdW5jdGlvbiAoJHNjb3BlLCAkdGltZW91dCwgJHN0YXRlUGFyYW1zKSB7XG4gICAgY3RybCA9IHRoaXM7XG4gICAgY29uc29sZS5sb2coJHN0YXRlUGFyYW1zLm15UGFyYW0pO1xuICAgIGN0cmwuZnVsbEltYWdlVXJsID0gJHN0YXRlUGFyYW1zLm15UGFyYW0uZnVsbEltYWdlVXJsO1xuICAgIGN0cmwudGh1bWJOYWlsID0gJHN0YXRlUGFyYW1zLm15UGFyYW0uaW1hZ2U7XG4gICAgY3RybC50aXRsZSA9ICRzdGF0ZVBhcmFtcy5teVBhcmFtLnRpdGxlO1xuICAgIGN0cmwudGlueW1jZU1vZGVsID0gJyc7XG4gICAgLy9jdHJsLmlzVmlld2VyQnVpbHQgPSBmYWxzZTtcbiAgICAvL3ZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJPR2ltYWdlXCIpO1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAvL21pbkhlaWdodDogNTAwLFxuICAgICAgICAvL21pbldpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgICBpbmxpbmU6IHRydWUsXG4gICAgICAgIGJ1aWxkOiBmdW5jdGlvbiBidWlsZChlKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGUudHlwZSk7XG4gICAgICAgICAgICBjdHJsLmlzVmlld2VyQnVpbHQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgYnVpbHQ6IGZ1bmN0aW9uIGJ1aWx0KGUpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZS50eXBlKTtcbiAgICAgICAgICAgIGN0cmwuaXNWaWV3ZXJCdWlsdCA9IHRydWU7XG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgICQoJy5pbWFnZScpLnZpZXdlcihvcHRpb25zKTtcblxuICAgIGN0cmwuaXNUcmFuc2NyaWJlID0gZmFsc2U7XG4gICAgY3RybC50cmFuc2NyaXB0aW9uID0gXCJlbXB0eVwiO1xuICAgIGN0cmwudHJhbnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY3RybC5pc1RyYW5zY3JpYmUgPSB0cnVlO1xuICAgIH07XG4gICAgLyoqXHJcbiAgICAgY3RybC5vcGVuUGhvdG9Td2lwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgdmFyIHBzd3BFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBzd3AnKVswXTtcclxuICAgICAgICAgICAgLy8gYnVpbGQgaXRlbXMgYXJyYXlcclxuICAgICAgICAgdmFyIGl0ZW1zID0gW1xyXG4gICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgIHNyYzogY3RybC5mdWxsSW1hZ2VVcmwsXHJcbiAgICAgICAgICAgICAgICAgdzogOTY0LFxyXG4gICAgICAgICAgICAgICAgIGg6IDEwMjRcclxuICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgIF07XHJcbiAgICAgICAgICAgIC8vIGRlZmluZSBvcHRpb25zIChpZiBuZWVkZWQpXHJcbiAgICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgLy8gaGlzdG9yeSAmIGZvY3VzIG9wdGlvbnMgYXJlIGRpc2FibGVkIG9uIENvZGVQZW4gICAgICAgIFxyXG4gICAgICAgICAgICAgaGlzdG9yeTogZmFsc2UsXHJcbiAgICAgICAgICAgICBmb2N1czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAvLyAuLi5cclxuICAgICAgICAgICAgIC8vIFlvdXIgb3RoZXIgb3B0aW9ucyxcclxuICAgICAgICAgICAgIC8vIC4uLlxyXG4gICAgICAgICAgICAgZ2V0RG91YmxlVGFwWm9vbTogZnVuY3Rpb24gKGlzTW91c2VDbGljaywgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgIGlmIChpc01vdXNlQ2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI7IC8vPC0tLS0gVGhpcyA0XHJcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaW5pdGlhbFpvb21MZXZlbCA8IDAuNyA/IDIgOiAxLjMzOyAvLzwtLS0tIDQgaGVyZVxyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICBtYXhTcHJlYWRab29tOiAyLCAvLzwtLS0tIGFuZCB0aGlzIDQgaGVyZVxyXG4gICAgICAgICAgICAgICAgc2hvd0FuaW1hdGlvbkR1cmF0aW9uOiAwLFxyXG4gICAgICAgICAgICAgaGlkZUFuaW1hdGlvbkR1cmF0aW9uOiAwXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBnYWxsZXJ5ID0gbmV3IFBob3RvU3dpcGUocHN3cEVsZW1lbnQsIFBob3RvU3dpcGVVSV9EZWZhdWx0LCBpdGVtcywgb3B0aW9ucyk7XHJcbiAgICAgICAgIGdhbGxlcnkuaW5pdCgpO1xyXG4gICAgIH07XHJcbiAgICAgICAgY3RybC5vcGVuUGhvdG9Td2lwZSgpO1xyXG4gICAgKi9cbiAgICAvL2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4nKS5vbmNsaWNrID0gb3BlblBob3RvU3dpcGU7XG59XSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm55cGxWaWV3ZXIuZmFjdG9yeSgnTnlwbEFwaUNhbGxzJywgW1wiJGh0dHBcIiwgXCIkcVwiLCBcIiRiYXNlNjRcIiwgZnVuY3Rpb24gKCRodHRwLCAkcSwgJGJhc2U2NCkge1xuICAgIHZhciBmYWN0b3J5ID0gdGhpcztcbiAgICB2YXIgYXV0aCA9ICRiYXNlNjQuZW5jb2RlKFwiTm9tYW5Ucmlwczp3YXRlcjFidXJ5XCIpO1xuICAgIHZhciBoZWFkZXJzID0geyBcIkF1dGhvcml6YXRpb25cIjogXCJUb2tlbiBcIiArIFwidG9rZW49XFxcIlwiICsgYXV0aCArIFwiXFxcIlwiIH07XG4gICAgLy9jb25zb2xlLmxvZyhoZWFkZXJzKTtcbiAgICBmdW5jdGlvbiBidWlsZEh0dHBSZXF1ZXN0KHVybCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKHVybCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmFzaWMgJyArIGF1dGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZXh0cmFjdChyZXN1bHQpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICBpZiAocmVzdWx0LmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhLm55cGxBUEkucmVzcG9uc2UucmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbnlwbFNlYXJjaDogZnVuY3Rpb24gbnlwbFNlYXJjaChzZWFyY2hUZXh0KSB7XG4gICAgICAgICAgICB2YXIgbnlwbFVybCA9ICdodHRwOi8vYXBpLnJlcG8ubnlwbC5vcmcvYXBpL3YxL2l0ZW1zL3NlYXJjaD9xPScgKyBzZWFyY2hUZXh0ICsgJyZwdWJsaWNEb21haW5Pbmx5PXRydWUnO1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICRodHRwKGJ1aWxkSHR0cFJlcXVlc3QobnlwbFVybCksIHsgaGVhZGVyczogaGVhZGVycyB9KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZXh0cmFjdChyZXNwb25zZSkpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9LFxuICAgICAgICBnZXRJbWFnZTogZnVuY3Rpb24gZ2V0SW1hZ2UoaXRlbSkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICRodHRwKGJ1aWxkSHR0cFJlcXVlc3QoaXRlbS5hcGlJdGVtRGV0YWlsVVJMKSwgeyBoZWFkZXJzOiBoZWFkZXJzIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEubnlwbEFQSS5yZXNwb25zZS5zaWJsaW5nX2NhcHR1cmVzLmNhcHR1cmUuaW1hZ2VMaW5rcyAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRodW1ibmFpbFVybCA9IGRhdGEubnlwbEFQSS5yZXNwb25zZS5zaWJsaW5nX2NhcHR1cmVzLmNhcHR1cmUuaW1hZ2VMaW5rcy5pbWFnZUxpbmtbNF0uJDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bGxJbWFnZVVybCA9IGRhdGEubnlwbEFQSS5yZXNwb25zZS5zaWJsaW5nX2NhcHR1cmVzLmNhcHR1cmUuaW1hZ2VMaW5rcy5pbWFnZUxpbmtbMF0uJDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGh1bWJuYWlsVXJsID0gZGF0YS5ueXBsQVBJLnJlc3BvbnNlLnNpYmxpbmdfY2FwdHVyZXMuY2FwdHVyZVswXS5pbWFnZUxpbmtzLmltYWdlTGlua1s0XS4kO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnVsbEltYWdlVXJsID0gZGF0YS5ueXBsQVBJLnJlc3BvbnNlLnNpYmxpbmdfY2FwdHVyZXMuY2FwdHVyZVswXS5pbWFnZUxpbmtzLmltYWdlTGlua1swXS4kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpdGVtLmZ1bGxJbWFnZVVybCA9IGZ1bGxJbWFnZVVybDtcbiAgICAgICAgICAgICAgICBpdGVtLnRodW1ibmFpbFVybCA9IHRodW1ibmFpbFVybDtcbiAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgJGh0dHAoYnVpbGRIdHRwUmVxdWVzdCh0aHVtYm5haWxVcmwpLCB7IGhlYWRlcnM6IGhlYWRlcnMgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAqLyAvL2NvbnNvbGUubG9nKHRodW1ibmFpbFVybCk7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpdGVtKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgfVxuICAgIH07XG59XSk7Il19
